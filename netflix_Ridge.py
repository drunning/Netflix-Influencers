import pandas as pd
import numpy as np
from operator import itemgetter
from sklearn.ensemble import  RandomForestRegressor
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_val_score
from sklearn.metrics import mean_squared_error
import statsmodels.api as sm



# path for data used and generated by this script
path = '../Data/'

# load train and test set
X_train = pd.read_pickle('../Data/X_train.pkl')
y_train = pd.read_pickle('../Data/y_train.pkl')
X_test = pd.read_pickle('../Data/X_test.pkl')
y_test = pd.read_pickle('../Data/y_test.pkl')



# parameter grid to be fed into GridSearchCV
param_grid = [
    {'alpha': [20, 30, 50], 'solver': ['svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga']}
  ]

# create a Ridge model
model = Ridge(random_state=42)
grid_search = GridSearchCV(model, param_grid, cv=5,
                           scoring='neg_mean_squared_error',
                           return_train_score=True)
# fit data to GridSearchCV
grid_search.fit(X_train, y_train)

# create final model using GridSearchCV's best estimator
final_model = grid_search.best_estimator_

# score the model on the train set
score_mse = cross_val_score(model, X_train, y_train, cv=10, scoring='neg_mean_squared_error')
score_rmse = np.sqrt(-score_mse)

# make final predictions using the final model and test set
final_predictions = final_model.predict(X_test)

# score the final predictions
final_mse = mean_squared_error(y_test, final_predictions)
final_rmse = np.sqrt(final_mse)

# make a list of the top coefficients store in useCoeffs
coeffs = []
for col, coef in zip(X_train.columns, final_model.coef_):
    if coef > 0:
        coeffs.append((col, coef))

coeffs = sorted(coeffs, key=itemgetter(1), reverse=True)
useCoeffs = [x[0] for x in coeffs[:15]]

# read in the complete dataset
df = pd.read_pickle('../Data/dfw_final.pkl')

# add Target and date to useCoeffs, so these are included in final dataset
useCoeffs.append('TARGET')
useCoeffs.append('new_date')

# create a final dataframe
final = df[useCoeffs][:].copy()
final.set_index('new_date', inplace=True)

# export to csv to use for charting
final.to_csv('../Data/netflix_ridge.csv')


# create X of useCoeffs and y of Target to get R2 and other statistics
X = df[useCoeffs].copy()
y = df['TARGET']
X = sm.add_constant(X)

model = sm.OLS(y, X).fit()
predictions = model.predict(X)
print(model.summary())
