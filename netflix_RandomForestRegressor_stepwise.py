import pandas as pd
import numpy as np
from sklearn.ensemble iRandomForestRegressor
import statsmodels.api as sm
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import cross_val_score


# path for data used and generated by this script
path = '../Data/'

# read data into dfw
dfw = pd.read_pickle('../Data/dfw_final.pkl')


# create a coefList variable to store the index number of features to keep
coefList = [0]

# iterate through features, check t-test pvals, keep only pvals <= 0.05
for idx in range(0, len(dfw.columns)):
    #print('idx: ', idx)
    coefList.append(idx)
    X = dfw[dfw.columns[coefList]]
    y = dfw_target
    X = sm.add_constant(X)

    model = sm.OLS(y, X).fit()
    predictions = model.predict(X)
    model.summary()


    keep=[]
    for pidx in range(1,len(model.pvalues)):
        if(model.pvalues[pidx]<=.05):
            keep.append(pidx-1)

    newList = []
    for i in range(0,len(keep)):
        newList.append(coefList[keep[i]])

    # store the new list of indexes in coefList
    coefList = newList


# Create X of selected features and y of target, run OLS to get final R2
X = dfw[dfw_scaled.columns[[[827, 1515, 2074, 2076, 2088, 2124, 2208, 2236]]]]
y = dfw_target
X = sm.add_constant(X)

#minimizing least squares
model = sm.OLS(y, X).fit()
predictions = model.predict(X)
print(model.summary())


# load train and test sets for RandomForestRegressor
X_train = pd.read_pickle('../Data/X_train.pkl')
y_train = pd.read_pickle('../Data/y_train.pkl')
X_test = pd.read_pickle('../Data/X_test.pkl')
y_test = pd.read_pickle('../Data/y_test.pkl')

# only use the features in the coefList
X_train = X_train.iloc[:,coefList]
X_test = X_test.iloc[:, coefList].copy()


# create parameter grid to feed to GridSearchCV
param_grid = [
    # try 12 (3×4) combinations of hyperparameters
    {'n_estimators': [3, 10, 30, 40, 50, 60], 'max_features': [2, 4, 6, 8]},
    # then try 6 (2×3) combinations with bootstrap set as False
    {'bootstrap': [False], 'n_estimators': [3, 10, 30], 'max_features': [2, 3, 5]},
  ]

forest_reg = RandomForestRegressor(random_state=42)

grid_search = GridSearchCV(forest_reg, param_grid, cv=5,
                           scoring='neg_mean_squared_error',
                           return_train_score=True)
# fit train data to GridSearchCV
grid_search.fit(X_train, y_train)


# create final model using GridSearchCV's best estimator
final_model = grid_search.best_estimator_


# use cross_val_score to get the RMSE for train set
score_mse = cross_val_score(final_model, X_train, y_train, cv=10, scoring='neg_mean_squared_error')
score_rmse = np.sqrt(-score_mse)

# make final predictions on test set
final_predictions = final_model.predict(X_test)

# score final predictions
final_mse = mean_squared_error(y_test, final_predictions)
final_rmse = np.sqrt(final_mse)
